These notes are even more scratch style notes.

SVG export and animation helpers

----------------------------------------

Unix: CentOS: How do you disable gnome-ssh-askpass for command-line use?

unset SSH_ASKPASS

http://kartzontech.blogspot.com/2011/04/how-to-disable-gnome-ssh-askpass.html

Nice automation script, try this one out:

cd ~/EddyWebViewer
git archive master | ssh mako0042@flute.cs.umn.edu \
  'rm -rf .www/EddyWebViewer
   mkdir  .www/EddyWebViewer
   cd     .www/EddyWebViewer
   tar -x
   chmod -R o+r .
   chmod o+x `find . -type d`'

----------------------------------------

Off topic:

http://blog.stackoverflow.com/2014/05/podcast-59-hes-one-of-those-science-ists/?cb=1

Well, maybe sites like Wikipedia and Stack Overflow need to take a
more pedagogical approach with new users, with special existing users
to give them the time and patience that they need.

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FFunctions_and_function_scope%2FStrict_mode

Tickless kernels?  Well, it's somewhat of a trick: it only refers to
the kernel not requiring ticks under certain circumstances.  The
system as a whole still needs timing, of course.

http://randomascii.wordpress.com/2013/07/08/windows-timer-resolution-megawatts-wasted/
http://lwn.net/Articles/549580/

----------------------------------------

Google site:

https://sites.google.com/a/umn.edu/mako-eddy-web-viewer/

----------------------------------------

Questions answered.

Need two modes in the Eddy Web Viewer.

1. Watch tracks from day to day, see the tracks alpha fade in and fade
   out.  Follow an eddy, see how it changes until it vanishes.
   Boundary, track.

2. Visualize how the boundaries of the eddies change.

3. Click on an eddy, select it, get information, follow.

4. Focus in on a region, change color scale.

5. Advanced rendering attributes such as swirling eddies and hatches
   scale, probably not as important.

6. Like a database query, filter the eddies that are
   displayed.

7. Preferred format: whatever works fastest in the viewer.

8. Speed is critical.  Performance matters, monitor bandwidth
   requirements and limitations.

9. Web hosting?  Maybe move to Amazon Web Services, we'll figure that
   out later.

Important!  SSH data directory:
  /project/expeditions/eddies_project_data/web_viewer

keifenhe

Woodrow Keifenheim

So two modes: one to show eddies in motion, another to see eddies
static, then click on an eddy to get more information.  The first mode
is critical in importance, the second mode, not so much.

----------------------------------------

Questions to ask Woodrow and James:

* Data precision?  32-bit floating point SSH.  24-bit fixed point.
  +/- 32 before the decimal, after the decimal.  JPEG compression,
  video compression.

* Do you want your SSH pixels nice and square or do you prefer
  bilinear interpolation smoothing?

* Resolution?  1440x721 for the current SSH data.

* How do the smallest size eddy tracks compare with the SSH
  resolution?

* The Sea Surface Height data measures from the international date
  line, not the prime meridian?

* Do you want the dates to appear hyphenless in the GUI?

* The main cause of slowness in track rendering appears to be
  differences in how efficient browsers are when being commanded to
  draw a line on the canvas.  One way to stabilize performance across
  browsers is to do all line rasterization in JavaScript and use
  putImageData(), as is being done with the raytracing renderers.
  Question which I already know the answer to: How do you draw a line
  without dividing to compute the slope?

* Any seasonal variations observed with the eddies?

* Browser testing?  Emulators of mobile devices.

* What did Hung mean by "slow"?

* NOT using SVG.  SVG DOM performance is said to be very poor when
  working with a large number of nodes.  This will especially be true
  if each eddy DOM object has an event listener attached to it.
  Memory leaks could also become a problem.  However, I haven't tested
  with SVG on this many datapoints, so I don't have specific evidence
  for these assertions yet.

* Web hosting?  Where should the site officially reside?

* JavaScript development in the labs: node.js

* Features vs. solidness of design.

* Visualization?  Highlight track datapoints how?

* What about the other viewers people are using?  Hung's viewer too
  slow?

* License notices?  Code included from other projects include them.

* What's with that computer next to this one that seems not to
  work?

Things to say:

* Above average cross-browser compatibility and performance.
  Great new slim GUI, cothreading...

* Need to say /competitively exceed/.  Performance like jsperf
  and Browserscope.  Not mediocre like D3.js.

* C to JavaScript translator.

* In case the whole web app thing cannot deliver that great of
  performance, we'll have a native backup.

* Plus, I'll be using all of my best codebase tricks in the code.

* Draw a crosshair at the center?

Things for me to do:

* I need to be make sure I implement multiple rendering mechanisms.

* It seems that loading the large JSON data is okay.  That means
  that I should be able to safely move onto building the kd-trees.

* Number of required experiments in rendering mechanisms:

* Tracks: full loading single image (composite image tiles) render,
  partial loading via XMLHttpRequest seeking, caching, w/wo kd-tree.

* SSH:  single load single render, reduction tiles.

* Best way to specify which code paths to use?  Just use class
  properties, maybe possibly use a setter function.

* Consolidate compatibility code.

* Multiple color schemes on the SSH RenderLayer.

* Interlaced raytracer.

Answers:

* Format of the dates: with/without dashes/hyphens, either way,
  whatever looks better.

* SSH at international date line: yes, you may need to shift so that
  it looks more interesting to other people.

* License notices: just open-source, like MIT license.  Make sure to
  say your name that you made it, though.

* Web hosting: Look on your own, check out Amazon Web Services, Google
  App Engine, see what works the best from home.  Then maybe go into
  to ring they have downstairs and go through MSI, the point is to
  find out what works best from home.  On your own, try to look for
  what works well from home.  Like you're making a proposal.

* SSH resolution?  Will probably stay at 1440x720 for the whole
  project.  Not entirely necessary, an experienced person would be
  able to look at it and just tell if that's an eddy or not.

* JPEG compression?  Shouldn't be an issue to limit down the precision
  of the SSH datapoints.

* Eddies that twist around across only a few pixels?  Maybe hide them
  at the global scale, show them when you zoom in.

* No seasonal variations observed with eddies, except that the
  increasing size of the ice caps can limit the oceanspace available
  to the eddies.

* Node.js installed on MSI?  Go ask help.msi.umn.edu, cc both James
  and Kumar, tell them you're working on this open-source project,
  make sure everything is cc on they're behalf so that that can
  intervene and answer for your.  We're the largest user of MSI so
  they will be friendly.

* We should try to get it to a state for other users to just get up
  and on the software, and see what features may be useful.

* Don't concentrate too much on the mobile, might not get the same
  experience as on desktop.

* The SSH data isn't entirely necessary.  Maybe don't need to load it
  all.  So animation can be done with the tracks alone.

To Woody:

* Please store the length of the tracks within the tracks somehow.

* Maybe the rendering engine should precompute and store the lengths.

For me:

* I need to allow generating information on the URL when the user
  changes the projection, view, etc.

* Need to alpha in/out on the tracks.

* Only load the data when needed.

Provide control over manual/automatic sea surface height scaling.

First thing to ask James next time:

So how many other eddy viewers are there?

----------------------------------------

Pending questions:

* Can I get the polar ice caps and land mass masks separate from the
  SSH data?  This will help a lot since I need to maintain a division
  between lossy and lossless compressed data for the web viewer.  It
  will also help in that I will be able to draw the regions of the
  current polar ice caps as white on the Earth.

* FFMPEG on MSI?  We'll need a reliable way to convert the image
  frames to video data.  Video data will have the best performance
  since it will require the least HTTP requests.

* Chelton tracks?  No, we don't care about Chelton tracks at all
  anymore.

* Note the branch created to cleanup the git repository.  Hung's old
  viewer data causes the 6 of the 10 MB in the repo files.  I should
  be able to permanently delete the excess data files for this, too.

* Eddy ID, track ID, amplitude, area, geodesic speed?  These are going
  to have to be gotten from elsewhere.

Now, things are winding down:

* NOTE: I need to handle eddies that span across the 360 mark
  specially so that a line is not drawn traversing the entire map.

* My location widget is broken.  It needs to be corrected for the
  current projection.

* Verify all my code is "use strict" safe.

* Get the new code to work in Internet Explorer.

* I need to do many things.

* Step forward and step backward

* Display only tracks that have one eddy in current date

* As soon as eddy leaves track, make it disappear.

* Draw a marker at the current date.

* Improve preemption timer on Windows systems

* Do not use negative degrees north and east.

Then simply take off all the buttons that currently don't work, and
then I'll be done.

Right now, memory fragmentation is a considerable problem in the
viewer, so I'll have to optimize it to be more memory conscious.

----------------------------------------

Serious repo cleanup work:

http://www.git-scm.com/book/ch9-7.html

"GUI improvements, advanced codebase, and JavaScript build infrastructure."

# Check the data size before:
git count-objects -v

git filter-branch --index-filter \
  'git rm --cached --ignore-unmatch -r blue_marble coolssh pngssh jpgssh docs/jsdocs' \
  -- 0889fbbe6c98db3a6d6de072f8eaf9485ee099b4^..
git remote rm origin
rm -Rf .git/refs/original
rm -Rf .git/logs/
git gc
git prune --expire now
git remote add origin https://mako0042@github.umn.edu/faghm001/EddyWebViewer.git
git push --force

# Check the data size after:
git count-objects -v

Then, for finally wiping out the contents of the remote, do this:
git push --force

For a safe push instead, do this:
git branch pruned
git push origin pruned

----------------------------------------

Need to include a short introduction for developers.  /Short/ is important.

Sphere sampling equation.  Divide up surface area evenly among the
points.

Eddy boundary finding.  Take the center point.  Extend one pixel
outward.  Trace convex boundary of pixels with same value.  If
successful, repeat.  You will get the largest boundary of the eddy.

Note: The JavaDocs currently don't automatically tell you what the
base class of classes and the types of objects are, so I'll have to
retrofit that information into the documentation comments manually.

I could just call it "View" instead of "Projection".

----------------------------------------

Things to go over at this current time:

* How's the video conversion status?

* About the daily data.  Is is about 7 times as large as the weekly
  data?  I don't have a copy of the daily data at the moment.

* The problem with only downloading the data at a specific point in
  time is caching.  XMLHttpRequests were not designed to efficiently
  work with large amounts of data, so there are a variety of problems
  when trying to use it for caching.  It might be the case that the
  browser doesn't do as good of a job at caching as it should do.
  Anyways, complicated caching logic needs to be implemented in
  JavaScript such that it will take quite a while to get a setup where
  only the needed data is downloaded.

* Also another problem with downloading the data at a specific point
  in time.  If only data at one point in time is downloaded, then
  there will be problems with tracks that are out of scope: tracks
  that are so long that they escape the cache size.  (This problem is
  particularly due to the storage of data keyed on tracks and using
  linked lists to assemble the tracks.)  For such a case, should only
  a red dot be drawn?

* I'm at the point where moving up to the daily data is doable, but
  doing so would introduce the same memory and download problems that
  was the case for the weekly data for the alpha viewer.  If this is
  okay, we can go with it.

* About the format of license notices... finishing steps.

* Public Github?

* About tracks rendering... the changes I will incorporate will
  provide some speedups, but not too many speedups.  I would have to
  move on to benchmarking multiple different mechanisms in browser,
  then choosing the fastest.  I won't have enough time for that,
  though.  Vector graphics is always more complicated and slower than
  raster graphics.  Raster graphics can convey a large amount of
  detail with very little computational overhead.  Vector graphics
  algorithms must be many times more complicated.  Land mass
  background is the way it is, in case you may not have been aware of
  it.

* (On the other hand, raster data is much larger in size.)

* Eddy boundaries.  For this, generate a monochrome image of the
  boundaries.

----------------------------------------

Icons TODO:

* Compass and calendar icons

Use a switch to control two modes of scrolling: pinned or
linear angle.

Test the most generic algorithm for tilt.

Rewrite Implementation Center to take the following form:

* Data Coversion and Export

* Overall Internal Code Architecture

* CSS User Interface

See the User Documentation for an overview of the new CSS
GUI.

Adding new projections?  Replace with d3?  In particular,
see this section.  d3 uses a conceptually incorrect model
for what it does, but the reason why... better performance
for some common projection calculations.

Why not: when.js: only designed for "promises", not
coroutines.

Strikedown of all popular JavaScript libraries.

Think about including a pre-MATLAB colored version of all SSH images
just to be nice.

----------------------------------------

Docs:

For every module:

* Problem: Solution, why this module exists.

* Basic usage example

* Document everything.  It's always nice to see that /everything/ has
  been covered comprehensively.  Everything.  Say that you must use
  TrigLUT as memoization.  Earth.nullschool.net used grid, but you
  must say it as that.  Conceptual framework.

* High-level framework.

* MapPol shift container: CSS shifting within box vs. draw to canvas.

Don't know if all variable caching is necessary.  Need to perform a
perf benchmark to decide.

Compute box edges and center.

Example functions are given in the base implementations.

Use return value checking in the examples.

Use requestAnimationFrame to request an arbitrary amount of time that
is appropriate for the browser.

Note: Many of the internal mathematics assume quadrant I as the
top-right, whereas many of the APIs assume top-left.

Flowchart to describe high-level modules.

Be careful about which Web API calls you make at the root document
level.  Better yet, wrap all root-level initializers into a special
startup function.  Maybe actually defer creating global objects until
it is known that they can be created safely.

The code is meant to be nearly identical to C/C++ syntax.

Minimize getContext() calls.

Great idea: Since some programmers (like me) will not want to fully
read the first README before diving into the code, put developer
documentation backreferences (hyperlinks) throughout the source code
where each such piece of documentation is applicable.

Marked in the code via @ref doc comments.

Put a table of contents at the very beginning of the developer
documentation (good).

Create dependency graphs, useful for ripple-wave transformation, which
unfortunately is necessary for maintaining this project.  JavaScript
is not good enough at optimization to do otherwise.

Make sure all variables that are members of objects are explicitly
initialized in the initializer function.  This will help with
compatibility with C.

Note:

https://www.gnu.org/philosophy/javascript-trap.html

----------------------------------------

So, with the new architecture, how do you go setting up the
environment and loading?

1. Preload the Dates.
2. Preload the EarthTexData.
3. Preload the TracksData.
4. Preload the SSH data.
5. Dispatch the rendering loop.

Other architecture:

* Keep the functions to simultaneously change all viewports at once.
  Don't need to do this for projection anymore, though.

* View-related parameters are now all changed via the global
  ViewParams object.

* Move mouse event handling code to slim_gui.

* Move GUI updating into slim_gui.

* Modify the render loop to exit every 15 ms, then come back and start
  the next task.

* Modify the render loop to first render at the screen resolution,
  then if there is any spare time, render again at a global resolution
  so that the map can be panned and still remain visible.

* Special global-resolution maps are used for accelerated orthographic
  and perspective projection rendering.

* Technically, the compositor no longer needs a backBuf now.  The
  renderlayers can be placed directly in the document and stacked on
  top of each other.

TODO later:

* Create a graticule RenderLayer.

To stack up the RenderLayers:

* Append each element to the drawingContainer.

* Set each element's style to
  "position: absolute; left: 0px; top: 0px".

* Set the viewport for each RenderLayer.

* Whenever updates need to be performed, simply call the RenderLayer
  directly, not the render() function.

* Loading at startup is now simply just preloading: the data would
  have been loaded anyways without the explicit control signal.

* Most parameters can be changed directly, followed simply by a
  rerender of each RenderLayer.

* Rendering cannot proceed until the Dates object has been loaded.

* Change various RenderLayers to change their viewing without
  rerendering.  How about using caching as an internal optimization.
  But then we need to keep track of the old ViewParams state...

A lot of the existing structure looks good.  What needs to be major
updated?  RenderLayer stacking.  For now, disable special 3-D modes
and treat them just like any other projection.

----------------------------------------

GUI Fixup:

* Graticule

* Latlon

* initCurDate

* UI Safety, invalid inputs

* The closures used to connect events creates circular references and
  thus reference leaks.

* Make sure the program is independent of the data width and height as
  much as possible.

* Do additional safety checks in the builder: tracks must be
  continuous.

Quick Checklist:

* Add proper play controls.  Improve mouse panning in test suite.
  Bring back fast recolorizer.

* Convert sources to cjs-typed code.  Make all type conversions
  explicit.

* Finish the feature detection framework.

* Check all isNaN().  Only run isNaN() once on one parameter from
  projector results.  Make sure all projectors set NaN correctly.

* Add auto-height-fitting function.

* Make Compositor a RenderLayer implementation.

* Make clipping optimal for all projections.

* I need a more formal bug tracker.

* Hash fragment bar processing.

* Make CSSLayers non-selectable.

* Graticule RenderLayer.

* Add height controls into GUI.

* Use vector graphics SVG in GUI when available.

* Filter Eddies and Render as different colors

* Bring legacy RenderLayers up-to-date

* Remove click-selection bug apparent in CSS RenderLayers.

* Design needed additional icons

* Move eddy filter options into the basic configuration bar

* Add keyboard user interface

* Improve legend

* Add dynamic loading screen

* Finish documentation

----------------------------------------

NOTE: The compression filter on Apache cannot send out the size of
very large files.  The way it is written is such that the entire file
would have to be buffered before being sent.  To avoid these problems,
compress the file ahead-of-time and make it available via content
negotiation.

NOTE: The reason why I have not officially used the sprite and SVG
images in the GUI is because I need to do more compatibility testing
on various aspects of each.

Caveats with the current source code:

* Some API syntaxes and names are quite long.  It would be nice if
  they were a bit shorter.

* Not all ways of doing things in the old code are yet ported to the
  new code.

* All tracks data must be loaded at once.  This is a practical
  consideration due to the way the tracks must be rendered.  Some
  tracks are hundreds of date indexes long, so it is only practical to
  download all data at once to coup with this, since the entire such
  track must be rendered.

* Auto-local SSH fitting is not yet available.

* Upper-case objects named after JavaScript global Math object.

Verify that all necessary code places place restrictions on the type
of variables that come from division, etc. integers.

NOTE identify all concurrency sections and annotate with mutexes where
applicable.

mutexLock(var);
mutexUnlock(var);

Defined by cjs/oev commons to do nothing.

Places for mutex lock/unlock:

* At the beginning and end of each cothread intended to be run
  concurrently.

* Whenever a function modifies non-private data of a different
  concurrency context.

* At the end of each cothread run, to yield an in-progress image back
  to... this doesn't really make sense.  With full threads, much less
  sharing could go on.  So for full threads, assume little sharing and
  only document mutexes for message passing objects.

Basically, parameters and switches used for communication.

Some cothreads are used just to logically group within a concurrency
context.  Others mark a top-level concurrency context that would be
run as separate threads, thus needing synchronization.

Coarse locking.  It doesn't make sense to use fine-grained locking in
the code, since most times when fine-grained locking would make a
difference, the code is incorrect anyways, i.e. changing ViewParams
during an unfinished render to get two halves of the image rendered
with different render styles.

Use a NEWS notifications section where current limitations are
documented, that will probably be removed in a later version.

Coding conventions, table of abbreviations.

ASCII Art!

http://thegrrl.com/2012/02/ascii-art-history/

----------------------------------------

Ocean Eddies Web Viewer Architecture

More than just a web viewer.  However, it turned out that in order to
get sufficient browser compatibility, a lot of code had to be written
specifically for the web platform, so this idea was not as viable as
it seemed from first start.  Either way, some quirks of the web
viewer, simply cannot make sense in the much more efficient OS-level
environment.

There are two core components that permeate the implementation of the
Ocean Eddies Web Viewer:

* Cothread
* RenderLayer

Cothread was introduced for the following reasons:

1. The Web Platform originally did not support Web Workers.

2. Early implementations of Web Workers did not support "moving" data
between Workers, so sharing data was expensive.

3. Sharing data across modern Web Workers is not practical without
implementing a mutex system on top of the base level primitives.

4. Sharing the data of render images in progress is essential to
provide responsiveness in the GUI, showing that the viewer is indeed
rendering the respective images.

At the core of the is the Cothread implementation.  This is a
near-mirror of thread in native programs on multithreaded operating
systems.

Multithreaded operating systems often feature a kernel thread
construct that user-mode programs may use.  However, the web platform
traditionally offered no such construct.  Web Workers were introduced
later as a means to offer concurrency; however, they were primarily
intended to be used for segmented processes, and thus tight sharing of
data is not practical via Web Workers.

Walk-through of example command-line session for RenderLayer test
bench.  Start with a walkthrough of the overall code base, at a high
level, general organizational guidelines.

Mandatory iterative chunking should be replaced with adaptive
iterative chunking to be jsruntime-speed independent.

TODO list projection lookup tables, vector EarthTex, seasonal
EarthTex.

The code you're looking at right now is the most likely thing other
programmers will jump to.  Concentrate on making the code the main
body for learning, and avoid external notes, unless linked to from
within the code.  Developer should be able to glance through code to
get a good idea of overall components.

TODO plain color raster EarthTexLayer, SVG TracksLayer, VML
TracksLayer, compat, 2D Equi Compositor Layer.  Looping rather than
restarting render when mouse panning.

Check object usage patterns.

Note SVG land mass silhouettes disused due to slow rendering.  Raster
rendering is much faster.

Need to improve render loop, make it preemptable so slow fps rendering
can be interrupted for panning.

Disable dragging of images, necessary to allow correct
interception of mouse pan events.

http://developer.nokia.com/community/wiki/How_to_disable_dragging_of_images_and_text_selection_in_web_pages
http://help.dottoro.com/lhqsqbtn.php

An example is always better than giving prose on what to do.  Use only
prose when explaining why something is the way it is.

Introduction to specializations

Some specializations only make sense with a narrow selection of
ViewParams.  Check the documentation to determine which
specializations are in place.  Usually it will be evident from the
name.

Note Hung's old code, d3, geojson, topojson, large size, slow
rendering.  See side-by-side implementations test cases.  Too much
high density geometry at low zoom level, need to swap to lower-detail
version like earth.nullschool.net does if viable.  Converted via an
Emacs macro.

Note setup a test server "python -m SimpleHTTPServer 8008"

Then "localhost:8008" in browser.
