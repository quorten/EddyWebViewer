These notes are even more scratch style notes.

SVG export and animation helpers

----------------------------------------

Unix: CentOS: How do you disable gnome-ssh-askpass for command-line use?

unset SSH_ASKPASS

http://kartzontech.blogspot.com/2011/04/how-to-disable-gnome-ssh-askpass.html

Nice automation script, try this one out:

cd ~/EddyWebViewer
git archive master | ssh mako0042@flute.cs.umn.edu \
  'rm -rf .www/EddyWebViewer
   mkdir  .www/EddyWebViewer
   cd     .www/EddyWebViewer
   tar -x
   chmod -R o+r .
   chmod o+x `find . -type d`'

----------------------------------------

Off topic:

http://blog.stackoverflow.com/2014/05/podcast-59-hes-one-of-those-science-ists/?cb=1

Well, maybe sites like Wikipedia and Stack Overflow need to take a
more pedagogical approach with new users, with special existing users
to give them the time and patience that they need.

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FFunctions_and_function_scope%2FStrict_mode

Tickless kernels?  Well, it's somewhat of a trick: it only refers to
the kernel not requiring ticks under certain circumstances.  The
system as a whole still needs timing, of course.

http://randomascii.wordpress.com/2013/07/08/windows-timer-resolution-megawatts-wasted/
http://lwn.net/Articles/549580/

----------------------------------------

About box

If you are having problems with the web viewer, check if your browser
meets the minimum requirements and passes the browser CSS and Event
test suite and the JavaScript language test suite.  (Reference
renderings at 96 DPI.)  If it is possible to workaround a bug or
issue, send a patch to us and we will include it in the web viewer.

The viewer should have virtually no problems on all browsers that meet
the minimum requirements.  See the list of browsers known to work, and
drop a comment if you think this is not good enough.  For lighter
weight systems, a native application written in C is also available.

----------------------------------------

Questions answered.

Need two modes in the Eddy Web Viewer.

1. Watch tracks from day to day, see the tracks alpha fade in and fade
   out.  Follow an eddy, see how it changes until it vanishes.
   Boundary, track.

2. Visualize how the boundaries of the eddies change.

3. Click on an eddy, select it, get information, follow.

4. Focus in on a region, change color scale.

5. Advanced rendering attributes such as swirling eddies and hatches
   scale, probably not as important.

6. Like a database query, filter the eddies that are
   displayed.

7. Preferred format: whatever works fastest in the viewer.

8. Speed is critical.  Performance matters, monitor bandwidth
   requirements and limitations.

9. Web hosting?  Maybe move to Amazon Web Services, we'll figure that
   out later.

Important!  SSH data directory:
  /project/expeditions/eddies_project_data/web_viewer

keifenhe

Woodrow Keifenheim

So two modes: one to show eddies in motion, another to see eddies
static, then click on an eddy to get more information.  The first mode
is critical in importance, the second mode, not so much.

----------------------------------------

Pre-load an image?  Just use JavaScript and HTML 5 image loading
like so?

http://www.htmlgoodies.com/tutorials/web_graphics/article.php/3480001

Great!  Image flipping, pre-render and then flip at high speed.

http://www.htmlgoodies.com/tutorials/web_graphics/article.php/3479941

Want to make a link open in a different window?

Use <a href="..." target="resource window"></a> as one method.

Use <a href="..." target="_blank"></a> to open in a new tab/window.

----------

Build the packed quadtrees:

1. Sort all the coordinates.
2. Scan through the coordinates in order.
3. Keep track of coordinate spacing.
4. When large batches of similarly spaced coordinates
   are found, bundle them into a packed structure.  Pad out
   any uneven space with interpolation.
5. Build the kd-tree on the packed coordinates.
6. Build linear interpolation reduction trees on top of the
   kd-tree.
7. Provide a server-side image generator to assist in sending
   pregenerated images straight to the client for video display.

It turns out that no sparse array magic will be needed on the SSH
data.  Just process it identical to how it is done in Google Earth.

----------

Need new CSS GUI test suites:

Box resize check

Mouse wheel check

CSS compatibility: Do not use periods in element IDs.

Fast and efficient way to get the current time in milliseconds:

if (!Date.now) {
  Date.now = function now() {
    return new Date.getTime();
  };
}

Date.now;

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now

----------------------------------------

Get an older version of Opera for compatibility testing:

http://arc.opera.com/pub/opera/linux/754/final/en/i386/static/

Oh yeah, Opera was proprietary software, so I'm not allowed to modify
it so that it works on my system.  Too bad, no go then.

Great high performance JavaScript CSV parser:

https://code.google.com/p/jquery-csv/

JQuery?  JQuery?!!!!  No way.  I'm not using it after all, binary data
will do much better.

----------------------------------------

Questions to ask Woodrow and James:

* Data precision?  32-bit floating point SSH.  24-bit fixed point.
  +/- 32 before the decimal, after the decimal.  JPEG compression,
  video compression.

* Do you want your SSH pixels nice and square or do you prefer
  bilinear interpolation smoothing?

* Resolution?  1440x721 for the current SSH data.

* How do the smallest size eddy tracks compare with the SSH
  resolution?

* The Sea Surface Height data measures from the international date
  line, not the prime meridian?

* Do you want the dates to appear hyphenless in the GUI?

* The main cause of slowness in track rendering appears to be
  differences in how efficient browsers are when being commanded to
  draw a line on the canvas.  One way to stabilize performance across
  browsers is to do all line rasterization in JavaScript and use
  putImageData(), as is being done with the raytracing renderers.
  Question which I already know the answer to: How do you draw a line
  without dividing to compute the slope?

* Any seasonal variations observed with the eddies?

* Browser testing?  Emulators of mobile devices.

* What did Hung mean by "slow"?

* NOT using SVG.  SVG DOM performance is said to be very poor when
  working with a large number of nodes.  This will especially be true
  if each eddy DOM object has an event listener attached to it.
  Memory leaks could also become a problem.  However, I haven't tested
  with SVG on this many datapoints, so I don't have specific evidence
  for these assertions yet.

* Web hosting?  Where should the site officially reside?

* JavaScript development in the labs: node.js

* Features vs. solidness of design.

* Visualization?  Highlight track datapoints how?

* What about the other viewers people are using?  Hung's viewer too
  slow?

* License notices?  Code included from other projects include them.

* What's with that computer next to this one that seems not to
  work?

Things to say:

* Above average cross-browser compatibility and performance.
  Great new slim GUI, cothreading...

* Need to say /competitively exceed/.  Performance like jsperf
  and Browserscope.  Not mediocre like D3.js.

* C to JavaScript translator.

* In case the whole web app thing cannot deliver that great of
  performance, we'll have a native backup.

* Plus, I'll be using all of my best codebase tricks in the code.

* Draw a crosshair at the center?

Things for me to do:

* I need to be make sure I implement multiple rendering mechanisms.

* It seems that loading the large JSON data is okay.  That means
  that I should be able to safely move onto building the kd-trees.

* Number of required experiments in rendering mechanisms:

* Tracks: full loading single image (composite image tiles) render,
  partial loading via XMLHttpRequest seeking, caching, w/wo kd-tree.

* SSH:  single load single render, reduction tiles.

* Best way to specify which code paths to use?  Just use class
  properties, maybe possibly use a setter function.

* Consolidate compatibility code.

* Multiple color schemes on the SSH RenderLayer.

* Interlaced raytracer.

Answers:

* Format of the dates: with/without dashes/hyphens, either way,
  whatever looks better.

* SSH at international date line: yes, you may need to shift so that
  it looks more interesting to other people.

* License notices: just open-source, like MIT license.  Make sure to
  say your name that you made it, though.

* Web hosting: Look on your own, check out Amazon Web Services, Google
  App Engine, see what works the best from home.  Then maybe go into
  to ring they have downstairs and go through MSI, the point is to
  find out what works best from home.  On your own, try to look for
  what works well from home.  Like you're making a proposal.

* SSH resolution?  Will probably stay at 1440x720 for the whole
  project.  Not entirely necessary, an experienced person would be
  able to look at it and just tell if that's an eddy or not.

* JPEG compression?  Shouldn't be an issue to limit down the precision
  of the SSH datapoints.

* Eddies that twist around across only a few pixels?  Maybe hide them
  at the global scale, show them when you zoom in.

* No seasonal variations observed with eddies, except that the
  increasing size of the ice caps can limit the oceanspace available
  to the eddies.

* Node.js installed on MSI?  Go ask help.msi.umn.edu, cc both James
  and Kumar, tell them you're working on this open-source project,
  make sure everything is cc on they're behalf so that that can
  intervene and answer for your.  We're the largest user of MSI so
  they will be friendly.

* We should try to get it to a state for other users to just get up
  and on the software, and see what features may be useful.

* Don't concentrate too much on the mobile, might not get the same
  experience as on desktop.

* The SSH data isn't entirely necessary.  Maybe don't need to load it
  all.  So animation can be done with the tracks alone.

To Woody:

* Please store the length of the tracks within the tracks somehow.

* Maybe the rendering engine should precompute and store the lengths.

For me:

* I need to allow generating information on the URL when the user
  changes the projection, view, etc.

* Need to alpha in/out on the tracks.

* Only load the data when needed.

JPEG Quality levels to consider:

... just use the default.  And don't even think about JPEG 2000.

http://blog.codinghorror.com/beyond-jpeg/
http://blogs.loc.gov/digitalpreservation/2013/01/is-jpeg-2000-a-preservation-risk/

Need more consistent performance between Firefox and Chrome?  Use a
JavaScript line rasterizer.

http://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm

NOTE: You cannot store arbitrary data in a PNG 32-bit image since it
will not be preserved due to premultiplied alpha.

Provide control over manual/automatic sea surface height scaling.

First thing to ask James next time:

So how many other eddy viewers are there?

Want a nice, translucent background on a CSS element?

http://robertnyman.com/2010/01/11/css-background-transparency-without-affecting-child-elements-through-rgba-and-filters/

When finished, change all CSS measurements to metric, please!

Wow!  Here's another way to include images inline:

http://css-tricks.com/data-uris/
http://css-tricks.com/32766/
http://css-tricks.com/snippets/htaccess/active-gzip-compression/

Unfortunately, IE 5-7 does not support this.

If the user's browser doesn't support this, the data will have to be
routed back to the user via the server.  Luckily, most people do not
use browsers that are too old to have support, so this will not impose
undue burden on the server.

Great!  This is even better to finish things off:

http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/
http://www.xarg.org/download/pnglib.js

Plus, it's even reported to have faster per-pixel manipulation than
HTML Canvas!  Execpt at large sizes...

Take note: For better speed, use brower's base64encode:

this.getBase64 = function() {
return window.btoa(this.getDump());
}

Plus, this also has the added advantage of an efficient 8-bit image
copying mechanism.  So you could generate an image 8-bit inline and
work with that with this library.  But... read from an 8-bit
downloaded image?  Not so much.

I should improve the library so that it includes fast single pass
stream encoding.  Multiple loops incur extra overhead.

----------------------------------------

Can you check the loading progress of an image created via new
Image()?  Not quite... sort of, but only with modern browsers.

http://stackoverflow.com/questions/14218607/javascript-loading-progress-of-an-image

----------------------------------------

Need a coding scratch space?  Got one right here.

Iterations to timeout algorithm:

/* Dynamically determine a goal number of iterations to run in order to
   reach the target timeout, based off of the number of iterations that
   could be performed in the previous cothread duration.  */

/* The main benefit of this cothreading mechanism is that it avoids
   expensive calls to Date.now() during the inner loop.  */

var timeout = this.timeout;
var lastElapTime = this.lastElapTime;
var lastNumIters = this.lastNumIters
var numIters = lastNumIters * timeout / lastElapTime;
var timeoutIter = this.i + numIters;

lastTime = Date.now();

for (; i < timeoutIter && condition; i++) {
}

lastElapTime = Date.now() - lastTime;
lastNumIters = numIters;

/* The above algorithm can also be nested within a loop that calls
   Date.now() on every iteration.  */

Buffering data:
loadData() handles this.

Cothread dispatcher:

Note that it is possible to use an array of cothreads that still have
work to do and only call those cothreads.  For simplicity, however,
cothreads are a always called to continueCT() until there is no work
left to do.  Only event handlers call start().

cumStatus = CothreadStatus.FINISHED;
renderReady = setViewport();
addStatus = loadData.continueCT(maybeAddToBuffer);
if (addStatus) cumStatus = addStatus;
if (renderReady)
  render.continueCT();

if (cumStatus != CothreadStatus.FINISHED)
  return setTimeout(browserTime);

kd-tree or heap?  That is the question.

Let's try looking at what can be done with a heap.

I.  Time comes first.  You have to search the timeframe range before
searching the spatial range.

Advantage: Can download eddies at nearest timeframe first.  Then
eddies are spatially downloaded across the globe within one time
frame.

Since the data is sorted, it can still be binary searched.  Thus, it
can be approached similar to a kd-tree traversal.  Good, this will be
interesting.  So this is a hybrid between a kd-tree and a sorted
array.

Not really too nice.  Then again, each eddy from a different timefrane
needs to be shaded differently.

Try this one out!  Can you use a global kd tree partition but locally
sort points to appear in chronological order?  If so, then efficient
time slicing should be possible without having to load all of the
data.  So this is where chunking is needed, but I still don't quite
get how to optimize this case.

Yes, it is possible, but it is very non-trivial.  Start with an
assumption.  A sorted array is a binary search tree.  Unfortunately,
it does not have a regular heap structure.

The idea is to just do a kd-tree traversal once for the 2d range and
then reuse the kd-tree across multiple dates in iterated order.

How about this way: build the big kd-tree dynamically, but load the
data in chronological order.  Yes, that's what I was getting at.  If
you know the number of data points, you know what the tree structure
must be.

The only way to do it your way would be to use "bogus points", or a
selection of top-level kd-tree notes that absolutely must be
downloaded.  That way, there is a high-level partition that is always
consistent.  Going further down from here, disjoint trees can be
searched individually, with significantly less points to search.
Low-level trees can be merged for faster range searcing.

Chrono download is still an issue.  Okay, here we go.  The data will
be broken up into fixed size chunks of an octree.  Further 2D
subdivision is handled via a kd-tree.  This means that multiple kd
trees will be downloaded at runtime, and consolidation must happen at
runtime.  What about removing decached data?  That requires kd-tree
deconstruction.  In other words, if kd-tree construction and
deconstruction becomes a bottleneck, then it should be skipped
altogether.

Okay, the decision is made.  No kd tree deconstruction.  Use a
recursive quad-tree structure and time framing.  I've looked at the
data myself and it only looks sparse over the land.  This can be
handled easily though by marking entire high level boxes as empty.
Points will be sorted in on a case-by-case basis.

Yes, this means multiple tree traversals will have to be made.  Or, by
only using a single quadtree structure, only one tree traversal needs
to be made.

Yet another great way to put together this web app.  I can use web
workers to help with the threaded rendering process.  The catch: this
web app won't benefit from web workers unless the browser also
supports data transfers.  Otherwise, passing objects and data will be
way too inefficient to be practical.

Things are looking good.  The HTML video element provides enough
control over playback for me to just superimpose a video element for
the SSH data.  In fact, I could retrieve all the data I need from a
video element, both for <canvas> and WebGL rendering.

Could this be the solution to the problem of Internet Explorer giving
me extra space underneath the iconBtns?

http://bonrouge.com/br.php?page=faq#img-gap
http://www.sitepoint.com/forums/showthread.php?249148-IE-puts-extra-space-at-bottom-of-image-in-a-div

That will do it.  But wow, that sure is a strange way to do it, very
non-CSS like in order to get the IE-style box model to work.

NOTE: Object oriented code has a tendency to be slower.

----------------------------------------

So how will I know "when I'm done"?  These are the few remaining
criteria:

Pre-Genesis:

* Solidify the TracksLayer and SSHLayer implementations.

----

* Implement the main loop.

* Load the SSH data as encoded images or as a video element.

* Progressively load the tracks data and tree traversal for potential
  visibility rendering.

* Full compatibility analysis.

* Fully documented code.

* Full developer documentation.

* Complete user documentation.

* Full and streamlined GUI.

* Full site design.

* 3D acceleration.

* Clean codebase.

* Smooth view transitions between multiple projections.

* Test cases.

* Fast, fast, fast!

Additional features:

* Native implementation

* Web Workers

Google site:

https://sites.google.com/a/umn.edu/mako-eddy-web-viewer/

Performance optimization: Go through my code and change all constants
to #define and likewise for inline functions.

Web Workers will be of limited applicability, since passing data back
and forth to a Web Worker is non-trivial and efficient data transfers
are not available on Firefox 3.6.

----------------------------------------

Gotta make multiple versions:

csvtotga: convert csv to 32-bit floats in a 32-bit TGA, with the
  right transformations applied
tgafmt: format to fixed point numbers for web viewer

tgatoptga: convert to jpg with a pre-applied color palette
tgartga: render a tga with a projection

... or just use a series of options right inside the program

... drives me crazy.  just use full memory buffers for the pipeline.

Web Viewer Friendly Eddy Format:

- Series of fixed-width fields

[f1],[f2],[f3],...,[fn]

First field: [ date_index, num_eddies ]

num_eddies fields follows

Each eddy field is like this:

[ eddy_type, eddy_id, latitude, longitude, prev_eddy, next_eddy ]

eddy_type is 0 for cyclonic, 1 for acyclonic.  prev_eddy is the number
of records backwards in the file to scan to get the previous eddy from
the current eddy.  If zero, then this is the first eddy in the track.
Likewise, next_eddy is the number of records forward to scan to get
the next eddy in the track.  If zero, then this is the last eddy in
the track.

Following num_eddies is either another "first field" or the end
of the file.

Wait, but then that's not full random access...

Oh yeah, download all the date index entries at the start of the
file.  Then the rest of the file is random accesss.

File starts with a list of dates, each a fixed with field...

Then follows the eddies in a contiguous array.

* Avoid pointers in the code to decrease load on the garbage
  collector reference counting mechanism.  Use indexes when
  possible instead.

Inside the quadtree, there is an eddy index and an indicator of
cyclonic/anticyclonic.  I know, it's a pain to keep track of so
many objects, but this is how things must start.  To mitigate
this, only load in eddies that are needed.

To make things simple, just implement both a kd-tree and a quad-tree.
Summary of differences.  A kd-tree has better memory characteristics
(O(n)) but worse lookup time (O(lg n)), but a quad-tree has better
lookup time (O(1)) but worse memory characteristics (number of cells +
number of elements).

  /* No, one kd-tree per date index.  No chunking.  It is up to the
     client to perform top-level kd-tree building.  */

  /* Top-level kd-tree building is unnecessary.  Why?  Because the
     runtime is still O(lg n).  Render linearly more points?  The user
     expectation is linearly longer render time.  It's just a matter
     of changing what the constant in the linear relationship is.
     Chances are that the tree depth per date index will remain
     constant.  */

So here's the challlenge: What is the threshold where a kd-tree and a
quad-tree break even?  You need to compare just lookup time: a kd-tree
obviously wins all when it comes to memory cost.

If memory is at a premium, then use a kd-tree.  For large sizes, a
kd-tree will obviously benefit from not storing a huge cell bucket
structure.  Otherwise, if there is not much memory demand (small
number of elements), then use a quad-tree.  However, a kd-tree
competitively matches the speed of a quad-tree when there are not many
elements.  Additionally, a quad-tree may have issues with exceeding
the size of the CPU cache.

I guess the decision is clear then... kd-trees are the invariant
winner.  Plus, even if I did go with quad-trees, I'd have to bucket
into date blocks anyways, each of which would need its own quad-tree,
and iterating through common dates would necessarily have to iterate
through multiple date blocks, so segmented kd-trees aren't all that
bad.  One problem with kd-trees is that it would take time to build a
kd-tree client-side, but if the kd-tree is only loaded in server
pre-built blocks, then this is not an issue.  Here's where my blocking
structures come into play.

Grouping multiple nearby dates into date blocks really helps the
algorithm.  I think that was the only missing thought from my previous
plans.

The question, then, is how big is the block size?  64 KB, how about
that.  Doesn't give the best experience for 56 kbps moden users, but
should be good enough.  Only about 250 tracks/block?  No, that's too
small.  That's the size that supposed to be in only one bucket.  Were
a quad-tree to be used instead, how many cells should there be in one
timeframe bucket?  64 x 128 = 8192.  There will be 2048000
tracks/block.  2048000 * 262 bytes = 511 MB?  That's way too big,
though.  Okay, it's a deal: 64 KB/block.

Wow, another optimization: Rather than nesting arrays, just line up a
fixed number of numbers into one big array.  Maybe?  Or maybe that's
not enough blocking to be a machine optimal block size.

Don't use one big mesh array.  Use nested arrays: The overhead will be
minimal, and dynamically adding and removing elements will be faster.

Last argument for using a top-level kd-tree.  Advantage: Gives a
top-level three-dimensional kd-tree for latitude, longitude, and date.
This gives a good even partitioning of the overall large-scale domain.
Lower in the kd-tree when there is only one discreet date, the kd-tree
downgrades to a series of 2D kd-trees that can be downloaded
separately.  bsearch-style tree storage guarantees that these 2D
kd-trees will be contiguous and uninterrupted in memory.
Disadvantage: Even when storing with a bsearch-style tree, there are
no guarantees that any points of any dimension will be stored in
order.  Here's how it works.  Consider the 2D case.  You have a
kd-tree with one X split.  Then in one of the X cells, you have a Y
split.  Now consider any X ordering of points in the two Y cells.
When the tree is stored in memory bsearch-style, one of these entire Y
cells is going to have to come before the other, even though both sets
of X ordered points are the same.  Thus, the kd-tree does not store
data fully ordered in any one dimension, but rather in "kd-tree"
order.

Okay, I've think I've got it for tracks rendering:

kd-tree sort lats and lons of eddies on the same date.  Store the tree
in bsearch order.  Then sort all the dates in ascending order.  The
superstructure will be stored in this order.

Render a track:

For each date in the render visibility range:
  Do a potential visibility traversal of the kd-tree to determine the
    list of points to be rendered.
  Assign opacities based off of the date index.
  Render the point, if necessary.

Next, render the lines to connect the points:
  Sort the list of points to be rendered by index.
  Note that when rendering the lines, the first point in the line will
    always have the lowest index.  Also note that we only need to traverse
    the linked list of render points in forward order for drawing visible
    lines.  Backward-order traversal is only used to smooth the direction
    arrow when drawing only one timeframe.
  Start connecting lines on points, going up one index at a time in the
    list until there are no more lines left to be rendered.

Viable idea for singly linked lists: "next" eddy indexes never point
backwards in time, so if you do store a "next" index that points
backwards in time, that marks the end of the list, and the backwards
pointer actually points to the eddy that corresponds to the start of
the list.  So singly-linked list storage is economic for transmitting
the data over the Internet.  For the viewer, it might convenient to
construct the backwards pointers, but this is optional and up to the
choice of the implementer of the viewer.

No, I got it wrong this whole time.  You only need to kd-tree traverse
the first date index to be rendered.  Then you can get the following
points via the "next" pointers, no tree traversal involved.  You can
determine the date index from the pointer.  If two points of a line
are out of range, then don't render the line.  Stop traversing when
you exceed the last date index to render.

Wrong again.  Must always kd-tree traverse current timeframe points,
otherwise you'll short-count the number of visible tracks.

* You need "prev" pointers so that you can draw the escaping lines
  from visible tracks.

Okay, I think I've got it.  I can divide up the rendering process into
speed classes.

Class 0: For no visibility testing, just do forward traversal starting
from the first eddy of a track.

Class I: PVS traverse only the current timeframe.  Determine the past
and future tracks to render using only the "next" and "prev" pointers.

Class II: PVS traverse the first visible and the current timeframe.
Use only the "next" pointers to determine the tracks to render.

Class III: PVS traverse all visible timeframes.  Traverse only one
"next" pointer link to render one track line.  Only render a track
line from traversing one "prev" pointer link if the previous eddy is
outside of the visible render area.  (This only works well if visible
boundary checking is fast, i.e. no obviously curved boundary lines.)

One problem: These visibility testers miss lines where both endpoints
are on the outside of a cell.  The only computationally fast solution
to this problem is to "paint" the top-most intermediary kd-tree cell
which a line passes through but doesn't contain either of the two
endpoints.  This comes at the expensive of greater memory demand,
though, and is likely to have no practical advantage at the lowest
levels of the kd-tree.

Such additional points can be tagged as "virtual" points when added
into the tree.

How do you add them to the tree?  You can't add them to the tree until
one version of the tree has been already built.  Where do you add
them?  At the dividing node within a cell.  What levels do you not
want to do this at?  That's a hard question.  Let's look at it this
way.  We want less than 1% of the points in the kd-tree to result in
adding virtual intermediary points.  Thus, this is only performed at
the the top few levels of the tree.  lg(n / 100) defines the number of
top tree levels to use.  Overall, the memory and runtime
characteristics of this are not all that favorable, so we'll have to
go without using it.

An entirely aside solution to these problems is to store the data
track-wise, with the tracks sorted by there geographic size (maximum
distance between any two points in the track).  Then each track is
assigned a bounding box.  Then a kd-tree is built on top of this sort.
This solves all the problems with the painting intermediary points of
large scale tracks, but the major problem with this mechanism is that
does not economize interactive downloading.

It might actually be a good thing to not render very large scale lines
that cross across a small region you are trying to look at, though.
It might also be the case that the eddy tracks do not practically
behave like this, so it makes sense to just go with the algorithms
given above.

----------------------------------------

Additions to the CSS GUI:

* Use a page-turning calendar icon with a white top band for the
  "current date" field.

* Use a compass icon for the "Latitude, Longitude" field.

* Add drop-down sliders to all numeric configurable fields.  The
  drop-down slider allows both click-and-drag and arrow panning, like
  a scrollbar.  Also add vertical precision slider too.

** Do not waste screen space to add this advanced option.  Make the
   user double-click on the label to get to this.

** Start by displaying a blue shaded circle in the center of the
   screen.  The popup info displays the modal status and allows the
   user to exit by clicking on the X.  When the user clicks and drags
   on the blue dot, the popup is updated with the scale, current
   value, etc.

* Separate min and max track lengths.

----------------------------------------

Just to reiterate.  These are the forms of progressive raytrace
rendering that I need to implement:

* "Interlaced" rendering: Starting at a minimum resolution, render at
  progressively higher resolutions.  Must verify that browser can use
  nearest pixel sampling, though.

* "Center" rendering: Render a small portion of the center at full
  resolution, then progressively render the surrounding areas.

Perhaps I should also make the preemption interval user-configurable,
though the default should be good for most people who have modern
systems.

I also must absolutely implement storing the configuration within the
address bar hash fragment.  This feature proves to be invaluable for
communicating with others.

Think about how you would implement the GPU code... for each separate
rendering projection, you would implement a separate fragment shader.
Why be afraid to do the same with JavaScript.  Sure, you can have the
modular implementation, slow but easy for development, and you can
have the fast implementation, the one that uses only a dedicated
projection method.  All of the projection methods would be implemented
as macros for either way, of course.  Although math function calls are
okay, try to minimize user-code function calls in inner loops.  Don't
worry about scalar variable definitions, it will be okay as long as
you periodically return from the code to allow the garbage collector
to operate.

----------------------------------------

Things that I must be able to get done pretty fast:

* Parameterized TracksLayer

* Parameterized SSHLayer

* Main Loop (just startup)

* Clicking

* Mouse clicks

* Just go with Equirectangular projection

* How will the new code load the dates?  Use a simple non-cothreaded
  initialization module.

Loading the dates will be taken care of by a global module.

So, how do I start?  Just add parameters to the TracksLayer and
SSHLayer.  Then the GUI code just hooks right into them, except
that I also have a main loop to manage this too.

Seriously, let's try to keep things simple: We'll just chain rendering
in a SeriesCTCtl.  That way, we don't have to worry about too much
code complexity.

Okay, break time.  Let's see what we've got done so far:

* Dates

* Cyc and acyc track loading

* Render one of cyc or acyc, but not both.

* Viewer parameterized as much as useful for at one size.  Pixelation
  will have to do for other render sizes.

Need:

* Error checking for image loader must be fixed.

* Parameterized layers

* Compositor class

* Mandatory graticule rendering.  Currently, it is too slow.

* All mouse handling code goes in GUI codebase.  No pointer
  calibration needed whatsoever for this project, just use clientX and
  clientY.  What about the cothread dispatcher?  Create a MainLoop
  class for that.  Lump all quickwrite and disorganized code into
  "compositor.js"

* Similar to the older viewer, we will just draw onto one "master"
  canvas size, then we will pull off of the master canvas to create
  the display canvas.  Thus, we only render onto a 2D canvas, and for
  the 3D projectors, we will raytrace like has been done in the past,
  and 2D will display and scroll.  Only equirect will tile.

Don't need:

* More than one layer size

Okay, how to integrate the SSHLayer with the old code base?

No, work on the new code base.  Integrate the old code with the new
code.

No partial rendering.  No max track ranging.  Yes filtering, though.
Yes cothreading, though.  No IOWAIT-ing.

Do not use curDates private to layers.  Just use one global in Date.

----

SSHLayer:

Parameterized data loading.

No set viewport magic.  Just adjust the lower-level parameter.

Both 2D and 3D display:

Use a simple compositor class.

What is the architecture of the compositor?

The compositor is a wrapper around a SeriesCTCtl that runs
RenderLayers in progress to completion.  Each time the SeriesCTCtl
exits, the compositor composites all the front buffers of the
RenderLayers in progress.

Build the raytracers right into Compositor, in all ugliness.  Yes, for
now, if the raytracers are too slow, they are just too slow.

DO NOT call startExec() bare.  For now, you must always use the
start() function.

----

Pending questions:

* Can I get the polar ice caps and land mass masks separate from the
  SSH data?  This will help a lot since I need to maintain a division
  between lossy and lossless compressed data for the web viewer.  It
  will also help in that I will be able to draw the regions of the
  current polar ice caps as white on the Earth.

* Eddy ID, track ID, amplitude, area, geodesic speed?  These are going
  to have to be gotten from elsewhere.

Now, things are winding down:

* NOTE: I need to handle eddies that span across the 360 mark
  specially so that a line is not drawn traversing the entire map.

* My location widget is broken.  It needs to be corrected for the
  current projection.

* Verify all my code is "use strict" safe.

* Get the new code to work in Internet Explorer.

* I need to do many things.

* Step forward and step backward

* Display only tracks that have one eddy in current date

* As soon as eddy leaves track, make it disappear.

* Draw a marker at the current date.

* Improve preemption timer on Windows systems

* Do not use negative degrees north and east.

Then simply take off all the buttons that currently don't work, and
then I'll be done.

Right now, memory fragmentation is a considerable problem in the
viewer, so I'll have to optimize it to be more memory conscious.

----------------------------------------

Last things to add to the viewer:

put in about
legend, just center, not entire body, colors
contact
system-level
research
just James contact
alpha version

In Advanced configuration
<span style="color: red">Alpha Version of Viewer</span>

<b>Legend</b>

<ul>
  <li>Circles = center of eddy, not size</li>
  <li>Both cyclonic and anticyclonic are colored purple</li>
  <li>Sea Surface Height (SSH) ranges from -32 to +32 cm for the
  MATLAB palette.</li>
</ul>

Add the viewer to the navbar.

Useful search engine information:

http://www.feedthebot.com/
http://googlewebmastercentral.blogspot.com/2007/02/discover-your-links.html
http://en.wikipedia.org/wiki/Attention_economy
http://en.wikipedia.org/wiki/Nofollow

Serious repo cleanup work:

http://www.git-scm.com/book/ch9-7.html

"GUI improvements, advanced codebase, and JavaScript build infrastructure."

# Check the data size before:
git count-objects -v

git filter-branch --index-filter \
  'git rm --cached --ignore-unmatch -r blue_marble coolssh pngssh jpgssh docs/jsdocs' \
  -- 0889fbbe6c98db3a6d6de072f8eaf9485ee099b4^..
git remote rm origin
rm -Rf .git/refs/original
rm -Rf .git/logs/
git gc
git prune --expire now
git remote add origin https://mako0042@github.umn.edu/faghm001/EddyWebViewer.git
git push --force

# Check the data size after:
git count-objects -v

Then, for finally wiping out the contents of the remote, do this:
git push --force

For a safe push instead, do this:
git branch pruned
git push origin pruned

----------

IE6 IE7 display: inline-block

http://stackoverflow.com/questions/6544852/ie7-does-not-understand-display-inline-block

JavaScript minification:

Best: YUI compressor:

http://yui.github.io/yuicompressor/

----------------------------------------

Time to put an end to ttd-notes

Memory overhead

These are the basic categories that I will sort ttd-notes into:

* Mathematical Concepts

* Implementation Center

* Compatibility Center

* Performance Center

* Thoughts, decisions, questions, answers

CSS compatibility: Avoid using both "top" and "bottom" or "left" and
"right" to define the size of a CSS box.

Note W3 DOM specification.  innerHTML and outerHTML, though intuitive
and easy, are nonstandard, notably introduced by IE5.5.

http://www.w3.org/DOM/

http://stackoverflow.com/questions/6790512/button-padding-width-problem

http://social.msdn.microsoft.com/Forums/sharepoint/en-US/131670eb-e08c-4ee6-9575-fe9ff1ef2561/no-focus-rectangle-on-checkboxes-or-radiobuttons?forum=sharepointdevelopmentlegacy

ASCII Art rendering backend.

Why does not use d3.js?  Short answer: copy and modify.  d3.js is not
already written to run on the GPU via a WebGL shader, so its best to
work with code that I can manage rewriting for that task.

Since the resolution will always be 1440x721 for this project, there
will be no need to break up images into tiles: the resolution is low
enough for such additional software complexity to be unjustified.

Compatibility: push, pop, innerHTML, outerHTML

List of JavaScript processors and their practical use.


----------------------------------------

Code base plans

Alright, let's break up the renderer and implement it:

Unit testing: JsUnit, QUnit

(Avoid the above frameworks, they do not maintain faithful
cross-browser compatibility.)

Discovery, design, component implementation/testing, composition.

Need to have table of acronyms and abbreviations


Good, I should be in good shape for performance counting when I use
performance.now() on Windows systems.  Don't worry, it's a drop-in
replacement for Date.now().

Date.now() is newer than +new Date().

Cite blue marble dataset.

----------

Video and Rendering

Need to check quirksmode compatibility tables for mobile devices.

GLSL shaders?  Only for big machines.

http://earthobservatory.nasa.gov/Features/BlueMarble/?src=ve

Would streaming video allow SSH animations?

http://willus.com/author/streaming2.shtml

Here's how to track pinch events:

http://stackoverflow.com/questions/11183174/simplest-way-to-detect-a-pinch
https://developer.apple.com/library/safari/documentation/UserExperience/Reference/GestureEventClassReference/GestureEvent/GestureEvent.html

This is also useful:

http://quirksmode.org/dom/events/resize_mobile.html

todo add rendering for outline

----------------------------------------

So now what do I need to do?

1. Implement a simple JavaScript code inliner.

2. Set up a build process.

3. Create the kd-tree and quadtree implementations.

4. Get the C++ side working.

5. Get the data to a place for testing.

6. Finish the code modularization.

7. Use the cross-browser shim for requestAnimationFrame.

The Google Closure tools are primarily a JavaScript minifier, not an
optimizing compiler.

----------------------------------------

Compatibility libraries, s

Say how you compiled the information, i.e. miscellaneous talk on
websearches, personal benchmarking, looking at the source code for
fast and efficient WebGL libraries.

It would have been nice had someone told me all the reasons why modern
web browsers and websites require so much memory.  Now I know why.

And for simulating colorblind vision:

http://vischeck.com/

Web development resources:

developer.mozilla.org

Microsoft Platform SDK for Windows Server 2003 R2.  Useful for
information on web development for Internet Explorer versions 4-6.
Since this information has been removed from the current web version
of the MSDN library, you'll have to download the above Windows PSDK to
gain access to the information.  I can't provide a URL to the download
since Microsoft's keeps changing/deleting content from their website.
You might have to download from a third party, or buy a used CD
version of the PSDK from Ebay.  Once you've got access to a copy of
the information, to actually view the information, you'll need a
sufficiently Windows-compatible environment to run the help viewers
that come with the PSDK.  Tough luck, but that's Microsoft for you.

The most reliable link I can recommend at the present (which is also
the link that Wikipedia currently recommends) is the CNET link to the
ISO image of the SDK.

Provide citation link to a web 3D graphics math reference, for
completeness.  If not possible, provide a book citation.

Use kd-tree instead of quadtree because memory is extremely expensive
for JavaScript programs.

I've just had an idea: w3m can be extended so that it can display
images as ASCII art.

"trademark" continuous variable value adjuster.  I'll have to see if
time permits me to add this or not.

Need developer center hub of links to good sites, then the rest of the
information follows.

Why not use SSH image tiling?  Not enough data for that to be
necessary.

Video encode the SSH data:

ffmpeg -threads 2 -i vidgen/ssh_%05d.jpg -r 25 -s 1440x720 \
  -b 16000k ssh.ogv

ffmpeg -threads 2 -i vidgen/ssh_%05d.jpg -r 25 -s 1440x720 \
  -vcodec mpeg4 -b 16000k ssh.mp4

* Since canvas is linked to window size, you can simply listen for
  onresize events to repaint the canvas.

Proportion of lawyers versus programmers, innovation versus
litigation.  Race to television.  JPEG troubles.

----------------------------------------

So what do I need to do in order to finish up the viewer?

* Clean up the compatibility code.

Should center be a projection property?

What is a projection property?  It's whatever you want it to be.

Affline transformations have nothing to do with the projection.

HTTP 1.1 Specification for XMLHttpRequest headers:

http://www.w3.org/Protocols/rfc2616/rfc2616.html

I need use a white background rectangle in all of the SVG images for
web_viewer_notes.
